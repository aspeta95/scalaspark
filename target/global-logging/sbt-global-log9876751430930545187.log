[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\asier\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\asier\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.9 (Oracle Corporation Java 14.0.2)
[debug] Load.defaultLoad until apply took 78.9587ms
[debug]           Load.loadUnit: plugins took 52.3282ms
[debug]           Load.loadUnit: defsScala took 0.3396ms
[debug] [Loading] Scanning directory D:\SCALA\Scala + Spark Exercises\Spark-scala\project
[debug]             Load.loadUnit: mkEval took 4.9695ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\SCALA\Scala + Spark Exercises\Spark-scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 7.9921 ms
[info] loading settings for project spark-scala-build from idea.sbt ...
[debug]               Load.resolveProject(spark-scala-build) took 29.6835ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-scala-build, base: D:\SCALA\Scala + Spark Exercises\Spark-scala\project, plugins: List(<none>))) took 41.783ms
[debug] [Loading] Done in D:\SCALA\Scala + Spark Exercises\Spark-scala\project, returning: (spark-scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1577.8494ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.7015ms
[debug]         Load.loadUnit(file:/D:/SCALA/Scala%20+%20Spark%20Exercises/Spark-scala/project/, ...) took 1638.9717ms
[debug]       Load.apply: load took 1707.5066ms
[debug]       Load.apply: resolveProjects took 2.9878ms
[debug]       Load.apply: finalTransforms took 34.4756ms
[debug]       Load.apply: config.delegates took 4.4071ms
[debug]       Load.apply: Def.make(settings)... took 195.2885ms
[debug]       Load.apply: structureIndex took 69.0461ms
[debug]       Load.apply: mkStreams took 0.9195ms
[info] loading project definition from D:\SCALA\Scala + Spark Exercises\Spark-scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2948.2704ms
[debug]     Load.loadUnit: defsScala took 0.0022ms
[debug] [Loading] Scanning directory D:\SCALA\Scala + Spark Exercises\Spark-scala
[debug]       Load.loadUnit: mkEval took 0.1269ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.271 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 27.7939ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\SCALA\Scala + Spark Exercises\Spark-scala, plugins: List(<none>))) took 31.6148ms
[debug] [Loading] Done in D:\SCALA\Scala + Spark Exercises\Spark-scala, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 657.1179ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.3818ms
[debug]   Load.loadUnit(file:/D:/SCALA/Scala%20+%20Spark%20Exercises/Spark-scala/, ...) took 3614.8963ms
[debug] Load.apply: load took 3625.9014ms
[debug] Load.apply: resolveProjects took 0.099ms
[debug] Load.apply: finalTransforms took 20.3455ms
[debug] Load.apply: config.delegates took 0.2563ms
[debug] Load.apply: Def.make(settings)... took 51.956ms
[debug] Load.apply: structureIndex took 22.0282ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to Spark-scala (in build file:/D:/SCALA/Scala%20+%20Spark%20Exercises/Spark-scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62066 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62066, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Spark-scala (in build file:/D:/SCALA/Scala%20+%20Spark%20Exercises/Spark-scala/)
[debug] > Exec(idea-shell, None, None)
